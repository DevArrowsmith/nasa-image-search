{"version":3,"sources":["assets/images/moonbg.jpg","assets/images/search.png","assets/images/nasa.png","styles/global.js","components/HeaderImage.js","controllers/getImages.js","components/SearchInput.js","components/Header.js","components/LoaderSpinner.js","components/SearchResults.js","components/NoImagesMessage.js","components/ErrorMessage.js","components/BlankMessage.js","components/ResultsRenderer.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","GlobalStyles","createGlobalStyle","moonImage","HeaderImage","styled","img","getImages","query","axios","get","then","response","console","log","status","returnedImages","data","collection","items","parsedImages","filter","image","media_type","images","map","imageData","id","nasa_id","links","href","description","description_508","catch","error","errorStatus","errorText","statusText","Promise","resolve","StyledSearchFrame","div","StyledSearchInput","input","StyledSearchIcon","SearchInput","setSearchResults","setResultsLoading","useState","searchState","setSearchState","performSearch","a","noSearchTerm","submitSearch","event","key","target","alt","type","placeholder","onChange","e","value","onKeyDown","src","searchImage","onClick","HeaderStyles","HeaderText","p","Header","nasaLogo","LoaderContainer","LoaderSpinner","resultsLoading","data-testid","color","height","width","SearchResultsContainer","ResultsFrame","ScaledImage","SearchResults","searchResults","result","title","renderImages","ErrorStyles","h2","NoImagesMessage","ErrorMessage","errorParams","BlankStyles","BlankMessage","ResultsRenderer","notSearched","length","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.04c85c23.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/moonbg.bdb22c2f.jpg\";","module.exports = __webpack_public_path__ + \"static/media/search.c210f942.png\";","module.exports = __webpack_public_path__ + \"static/media/nasa.8b14195c.png\";","import { createGlobalStyle } from 'styled-components';\nimport moonImage from '../assets/images/moonbg.jpg';\n\nexport const GlobalStyles = createGlobalStyle`\n  body {\n    margin: 0;\n    padding: 0;\n    background: #F6F4F0;\n    background-image: url(${moonImage});\n    background-size: cover;\n    background-attachment: fixed;\n    color: #363537;\n    font-family: 'Roboto', Arial, Helvetica, sans-serif;\n    display: flex;\n    flex-flow: column nowrap;\n    justify-content: start;\n    align-items: start;\n  }\n`","import styled from 'styled-components';\n\n\nconst HeaderImage = styled.img`\n  height: 30px;\n  width: auto;\n\n  @media (max-width: 640px) {\n    height: 25px;\n  }\n\n  @media (max-width: 540px) {\n    height: 20px;\n  }\n\n  @media (max-width: 480px) {\n    height: 15px;\n  }\n\n  @media (max-width: 355px) {\n    height: 12px;\n  }\n`\n\nexport default HeaderImage;","import axios from 'axios';\n\nconst getImages = (query) => {\n  if (!query) {\n    return Promise.resolve([]);\n  } else {\n    return axios\n      .get(`https://images-api.nasa.gov/search?q=${query}`)\n      .then(response => {\n        console.log(response);\n          if (response.status === 200) {\n            console.log(response);\n            const returnedImages =  response.data.collection.items;\n            const parsedImages = returnedImages.filter( image => image.data[0].media_type === \"image\");\n            console.log(returnedImages);\n            const images = parsedImages.map( imageData => ({\n              id: imageData.data[0].nasa_id,\n              image: imageData.links[0].href,\n              description: imageData.data[0].description_508\n            }));\n          return {\n            images,\n          }\n        };\n    })\n      .catch(error => {\n        console.log(error);\n        return ({\n          errorStatus: error.response.status,\n          errorText: error.response.statusText\n        })\n      })\n  }\n};\n\nexport default getImages;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport getImages from '../controllers/getImages';\nimport searchImage from '../assets/images/search.png';\n\n\nconst StyledSearchFrame = styled.div`\n  height: 30px;\n  background: #222222;\n  border-radius: 5px;\n  border: 2px solid maroon;\n  margin: 0 5px;\n  padding: 0 5px;\n  display: flex;\n  flex-flow: row nowrap;\n  justify-content: space-between;\n  align-items: center;\n\n  @media (max-width: 480px) {\n    height: 25px;\n  }\n`\n\nconst StyledSearchInput = styled.input`\n  background: transparent;\n  border: none;\n  outline: none;\n  margin: 0;\n  padding: 0;\n  color: #F6F4F0;\n  font-size: 1em;\n  font-family: 'Roboto', Arial, Helvetica, sans-serif;\n\n  @media (max-width: 480px) {\n    width: 140px;\n  }\n\n  @media (max-width: 400px) {\n    width: 100px;\n  }\n\n  @media (max-width: 355px) {\n    width: 90px;\n  }\n\n  @media (max-width: 355px) {\n    font-size: 1em;\n  }\n`\nconst StyledSearchIcon = styled.img`\n  height: 18px;\n  width: auto;\n  margin: 0 0 0 5px;\n`\n\nconst SearchInput = ({ setSearchResults, setResultsLoading }) => {\n\n  const [searchState, setSearchState] = useState(\"\");\n\n  const performSearch = async () => {\n    setResultsLoading(true);\n    if (!searchState) {\n      setSearchResults({noSearchTerm: true})\n    } else {\n      setSearchResults(await getImages(searchState));\n    };\n    setResultsLoading(false);\n  };\n  \n  const submitSearch = (event) => {\n    if (event.key === 'Enter' || event.target.alt === \"Click here to search\") {\n      performSearch();\n    }\n  };\n\n  return (\n    <>\n      <StyledSearchFrame>\n        <StyledSearchInput\n          type=\"search\"\n          placeholder=\"Search\"\n          onChange={e => setSearchState(e.target.value)}\n          onKeyDown={submitSearch}\n        />\n        <StyledSearchIcon \n          src={searchImage}\n          alt=\"Click here to search\"\n          onClick={submitSearch}\n        />\n      </StyledSearchFrame>\n    </>\n  )\n};\n\nSearchInput.propTypes = {\n  setSearchResults: PropTypes.func,\n  setResultsLoading: PropTypes.func\n};\n\nexport default SearchInput;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport HeaderImage from './HeaderImage';\nimport SearchInput from './SearchInput';\nimport nasaLogo from '../assets/images/nasa.png';\n\nconst HeaderStyles = styled.div`\n  height: 60px;\n  width: calc(100vw - 20px);\n  margin: 0;\n  padding: 0 10px;\n  background: #404138;\n  position: sticky;\n  top: 0px;\n  display: flex;\n  flex-flow: row nowrap;\n  justify-content: start;\n  align-items: center;\n\n  @media (max-width: 640px) {\n    height: 50px;\n  }\n\n  @media (max-width: 480px) {\n    height: 40px;\n  }\n`;\n\nconst HeaderText = styled.p`\n  margin: 0 5px 0 5px;\n  width: 230px;\n  font-size: 2.2em;\n  color: red;\n\n  @media (max-width: 640px) {\n    font-size: 1.8em;\n  }\n\n  @media (max-width: 540px) {\n    font-size: 1.5em;\n  }\n\n  @media (max-width: 480px) {\n    font-size: 1.2em;\n  }\n\n  @media (max-width: 355px) {\n    font-size: 1em;\n  }\n`\nconst Header = ({ setSearchResults, setResultsLoading }) => {\n\n  return (\n    <HeaderStyles>\n      <HeaderImage \n        src={nasaLogo} \n        alt=\"NASA logo\"\n      />\n      <HeaderText>Image Search</HeaderText>\n      <SearchInput\n        setSearchResults={setSearchResults}\n        setResultsLoading={setResultsLoading}\n       />\n    </HeaderStyles>\n  );\n\n};\n\nHeader.propTypes = {\n  setSearchResults: PropTypes.func,\n  setResultsLoading: PropTypes.func\n};\n\nexport default Header;\n","import React from 'react';\nimport styled from 'styled-components';\nimport Loader from 'react-loader-spinner'\n\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\"\n\nconst LoaderContainer = styled.div`\n  height: 90vh;\n  width: 100vw;\n  display: flex;\n  flex-flow: column;\n  justify-content: center;\n  align-items: center;\n`\n\nconst LoaderSpinner = ({ resultsLoading }) => {\n  console.log(resultsLoading);\n  if (resultsLoading) {\n    return (\n      <LoaderContainer data-testid=\"Loader\">\n        <Loader\n          type=\"RevolvingDot\"\n          color=\"red\"\n          height={100}\n          width={100}\n        />\n      </LoaderContainer>\n    );\n  };\n  return (null);\n}\n\nexport default LoaderSpinner;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\n\nconst SearchResultsContainer = styled.div`\n  width: calc(100vw - 40px);\n  margin: 20px;\n  display: flex; \n  flex-flow: row wrap;\n  justify-content: center;\n  align-items: start;\n`;\n\nconst ResultsFrame = styled.div`\ndisplay: flex; \nflex-flow: row wrap;\njustify-content: center;\nalign-items: start;\n`;\n\nconst ScaledImage = styled.img`\n  width: 270px;\n  height: 300px;\n  margin: 10px;\n  border: none;\n  border-radius: 10px;\n  overflow: hidden;\n  object-fit: cover;\n`\n\nconst renderImages = (searchResults) => {\n    return (\n      <ResultsFrame data-testid=\"images-rendered\">\n        {searchResults.images.map((result) => (\n          <ScaledImage\n            key={result.id}\n            src={result.image}\n            title={result.description}\n            alt={result.description}\n          />\n        ))}\n       </ResultsFrame> \n    )\n};\n\n\nconst SearchResults = ({ searchResults }) => {\n\n   return (\n      <SearchResultsContainer>\n        {renderImages(searchResults)}\n      </SearchResultsContainer>\n  );\n};\n\nSearchResults.propTypes = {\n  searchResults: PropTypes.object\n}\n\nexport default SearchResults;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nconst ErrorStyles = styled.h2`\nmargin: 20px 20px;\ncolor: #D6D4D0;\n`\n\nconst NoImagesMessage = () => {\n  return (\n    <ErrorStyles>\n      No images found. Please try a different search term.\n    </ErrorStyles>\n  )\n};\n\nexport default NoImagesMessage;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nconst ErrorStyles = styled.h2`\nmargin: 20px 20px;\ncolor: #D6D4D0;\n`\n\nconst ErrorMessage = ({ errorParams }) => {\n  return (\n    <div data-testid=\"error-message\">\n      <ErrorStyles>\n        {`${errorParams.errorStatus} Error: ${errorParams.errorText}`}\n      </ErrorStyles>\n    </div>\n  )\n};\n\nErrorMessage.propTypes = {\n  errorParams: PropTypes.object\n};\n\nexport default ErrorMessage;","import React from 'react';\nimport styled from 'styled-components';\n\nconst BlankStyles = styled.h2`\nmargin: 20px 20px;\ncolor: #D6D4D0;\n`\n\nconst BlankMessage = () => {\n  return (\n      <BlankStyles>\n        Please enter a search term.\n      </BlankStyles>\n  )\n};\n\nexport default BlankMessage;","import React, { useState } from 'react';\nimport SearchResults from './SearchResults';\nimport NoImagesMessage from './NoImagesMessage'\nimport ErrorMessage from './ErrorMessage';\nimport BlankMessage from './BlankMessage';\n\nconst ResultsRenderer = ({ searchResults, resultsLoading }) => {\n      if (searchResults.notSearched) {\n        return (null)\n      } else if (resultsLoading) {\n        return (null)\n\n      } else if (searchResults.noSearchTerm) {\n        return (\n          <BlankMessage />\n        )\n      } else if (searchResults.errorStatus) {\n        return (\n          <ErrorMessage errorParams = {searchResults} />\n        )\n      } else if (searchResults.images.length > 0) {\n        return (\n          <SearchResults searchResults = {searchResults} />\n        )\n      } else if (searchResults.images.length === 0 ) {\n        return ( \n          <NoImagesMessage />\n        )\n      }\n}\n\n  export default ResultsRenderer;\n\n\n","import React, { useState } from 'react';\nimport { GlobalStyles } from '../styles/global';\nimport Header from './Header';\nimport LoaderSpinner from './LoaderSpinner';\nimport ResultsRenderer from './ResultsRenderer'\n\n\n\nfunction App() {\n\n  const [searchResults, setSearchResults] = useState({notSearched: true});\n  const [resultsLoading, setResultsLoading] = useState(false);\n\n  console.log(searchResults);\n\n  return (\n    <>\n      <GlobalStyles />\n\n      <Header\n        setSearchResults = {setSearchResults}\n        setResultsLoading = {setResultsLoading}\n       />\n\n        <LoaderSpinner\n          resultsLoading = {resultsLoading} \n        />\n\n        <ResultsRenderer\n          resultsLoading = {resultsLoading}\n          searchResults={searchResults}\n        />\n    </>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}