{"version":3,"sources":["assets/images/moonbg.jpg","assets/images/search.png","assets/images/nasa.png","styles/global.js","components/HeaderImage.js","controllers/getImages.js","components/SearchInput.js","components/Header.js","components/LoaderSpinner.js","components/SearchResults.js","components/NoImagesMessage.js","components/ErrorMessage.js","components/BlankMessage.js","components/ResultsRenderer.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","GlobalStyles","createGlobalStyle","moonImage","HeaderImage","styled","img","getImages","query","axios","get","then","response","console","log","status","returnedImages","data","collection","items","parsedImages","filter","image","media_type","images","map","imageData","id","nasa_id","links","href","description","description_508","catch","error","errorStatus","errorText","statusText","Promise","resolve","StyledSearchFrame","div","StyledSearchInput","input","StyledSearchIcon","SearchInput","setSearchResults","setResultsLoading","useState","searchState","setSearchState","performSearch","a","noSearchTerm","submitSearch","event","key","target","alt","type","placeholder","onChange","e","value","onKeyDown","src","searchImage","onClick","HeaderStyles","HeaderText","p","Header","nasaLogo","LoaderContainer","LoaderSpinner","resultsLoading","data-testid","color","height","width","SearchResultsContainer","ResultsFrame","ScaledImage","SearchResults","searchResults","result","renderImages","ErrorStyles","h2","NoImagesMessage","ErrorMessage","errorParams","BlankStyles","BlankMessage","ResultsRenderer","notSearched","length","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.1fc54109.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/moonbg.bdb22c2f.jpg\";","module.exports = __webpack_public_path__ + \"static/media/search.c210f942.png\";","module.exports = __webpack_public_path__ + \"static/media/nasa.8b14195c.png\";","import { createGlobalStyle } from 'styled-components';\r\nimport moonImage from '../assets/images/moonbg.jpg';\r\n\r\nexport const GlobalStyles = createGlobalStyle`\r\n  body {\r\n    margin: 0;\r\n    padding: 0;\r\n    background: #F6F4F0;\r\n    background-image: url(${moonImage});\r\n    background-size: cover;\r\n    background-attachment: fixed;\r\n    color: #363537;\r\n    font-family: 'Roboto', Arial, Helvetica, sans-serif;\r\n    display: flex;\r\n    flex-flow: column nowrap;\r\n    justify-content: start;\r\n    align-items: start;\r\n  }\r\n`","import styled from 'styled-components';\r\n\r\n\r\nconst HeaderImage = styled.img`\r\n  height: 30px;\r\n  width: auto;\r\n\r\n  @media (max-width: 640px) {\r\n    height: 25px;\r\n  }\r\n\r\n  @media (max-width: 540px) {\r\n    height: 20px;\r\n  }\r\n\r\n  @media (max-width: 480px) {\r\n    height: 15px;\r\n  }\r\n\r\n  @media (max-width: 355px) {\r\n    height: 12px;\r\n  }\r\n`\r\n\r\nexport default HeaderImage;","import axios from 'axios';\r\n\r\nconst getImages = (query) => {\r\n  if (!query) {\r\n    return Promise.resolve([]);\r\n  } else {\r\n    return axios\r\n      .get(`https://images-api.nasa.gov/search?q=${query}`)\r\n      .then(response => {\r\n        console.log(response);\r\n          if (response.status === 200) {\r\n            console.log(response);\r\n            const returnedImages =  response.data.collection.items;\r\n            const parsedImages = returnedImages.filter( image => image.data[0].media_type === \"image\");\r\n            console.log(returnedImages);\r\n            const images = parsedImages.map( imageData => ({\r\n              id: imageData.data[0].nasa_id,\r\n              image: imageData.links[0].href,\r\n              description: imageData.data[0].description_508\r\n            }));\r\n          return {\r\n            images,\r\n          }\r\n        };\r\n    })\r\n      .catch(error => {\r\n        console.log(error);\r\n        return ({\r\n          errorStatus: error.response.status,\r\n          errorText: error.response.statusText\r\n        })\r\n      })\r\n  }\r\n};\r\n\r\nexport default getImages;\r\n","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled from 'styled-components';\r\nimport getImages from '../controllers/getImages';\r\nimport searchImage from '../assets/images/search.png';\r\n\r\n\r\nconst StyledSearchFrame = styled.div`\r\n  height: 30px;\r\n  background: #222222;\r\n  border-radius: 5px;\r\n  border: 2px solid maroon;\r\n  margin: 0 5px;\r\n  padding: 0 5px;\r\n  display: flex;\r\n  flex-flow: row nowrap;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n\r\n  @media (max-width: 480px) {\r\n    height: 25px;\r\n  }\r\n`\r\n\r\nconst StyledSearchInput = styled.input`\r\n  background: transparent;\r\n  border: none;\r\n  outline: none;\r\n  margin: 0;\r\n  padding: 0;\r\n  color: #F6F4F0;\r\n  font-size: 1em;\r\n  font-family: 'Roboto', Arial, Helvetica, sans-serif;\r\n\r\n  @media (max-width: 480px) {\r\n    width: 140px;\r\n  }\r\n\r\n  @media (max-width: 400px) {\r\n    width: 100px;\r\n  }\r\n\r\n  @media (max-width: 355px) {\r\n    width: 90px;\r\n  }\r\n\r\n  @media (max-width: 355px) {\r\n    font-size: 1em;\r\n  }\r\n`\r\nconst StyledSearchIcon = styled.img`\r\n  height: 18px;\r\n  width: auto;\r\n  margin: 0 0 0 5px;\r\n`\r\n\r\nconst SearchInput = ({ setSearchResults, setResultsLoading }) => {\r\n\r\n  const [searchState, setSearchState] = useState(\"\");\r\n\r\n  const performSearch = async () => {\r\n    setResultsLoading(true);\r\n    if (!searchState) {\r\n      setSearchResults({noSearchTerm: true})\r\n    } else {\r\n      setSearchResults(await getImages(searchState));\r\n    };\r\n    setResultsLoading(false);\r\n  };\r\n  \r\n  const submitSearch = (event) => {\r\n    if (event.key === 'Enter' || event.target.alt === \"Click here to search\") {\r\n      performSearch();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <StyledSearchFrame>\r\n        <StyledSearchInput\r\n          type=\"search\"\r\n          placeholder=\"Search\"\r\n          onChange={e => setSearchState(e.target.value)}\r\n          onKeyDown={submitSearch}\r\n        />\r\n        <StyledSearchIcon \r\n          src={searchImage}\r\n          alt=\"Click here to search\"\r\n          onClick={submitSearch}\r\n        />\r\n      </StyledSearchFrame>\r\n    </>\r\n  )\r\n};\r\n\r\nSearchInput.propTypes = {\r\n  setSearchResults: PropTypes.func,\r\n  setResultsLoading: PropTypes.func\r\n};\r\n\r\nexport default SearchInput;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled from 'styled-components';\r\nimport HeaderImage from './HeaderImage';\r\nimport SearchInput from './SearchInput';\r\nimport nasaLogo from '../assets/images/nasa.png';\r\n\r\nconst HeaderStyles = styled.div`\r\n  height: 60px;\r\n  width: calc(100vw - 20px);\r\n  margin: 0;\r\n  padding: 0 10px;\r\n  background: #404138;\r\n  position: sticky;\r\n  top: 0px;\r\n  display: flex;\r\n  flex-flow: row nowrap;\r\n  justify-content: start;\r\n  align-items: center;\r\n\r\n  @media (max-width: 640px) {\r\n    height: 50px;\r\n  }\r\n\r\n  @media (max-width: 480px) {\r\n    height: 40px;\r\n  }\r\n`;\r\n\r\nconst HeaderText = styled.p`\r\n  margin: 0 5px 0 5px;\r\n  width: 230px;\r\n  font-size: 2.2em;\r\n  color: red;\r\n\r\n  @media (max-width: 640px) {\r\n    font-size: 1.8em;\r\n  }\r\n\r\n  @media (max-width: 540px) {\r\n    font-size: 1.5em;\r\n  }\r\n\r\n  @media (max-width: 480px) {\r\n    font-size: 1.2em;\r\n  }\r\n\r\n  @media (max-width: 355px) {\r\n    font-size: 1em;\r\n  }\r\n`\r\nconst Header = ({ setSearchResults, setResultsLoading }) => {\r\n\r\n  return (\r\n    <HeaderStyles>\r\n      <HeaderImage \r\n        src={nasaLogo} \r\n        alt=\"NASA logo\"\r\n      />\r\n      <HeaderText>Image Search</HeaderText>\r\n      <SearchInput\r\n        setSearchResults={setSearchResults}\r\n        setResultsLoading={setResultsLoading}\r\n       />\r\n    </HeaderStyles>\r\n  );\r\n\r\n};\r\n\r\nHeader.propTypes = {\r\n  setSearchResults: PropTypes.func,\r\n  setResultsLoading: PropTypes.func\r\n};\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport Loader from 'react-loader-spinner'\r\n\r\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\"\r\n\r\nconst LoaderContainer = styled.div`\r\n  height: 90vh;\r\n  width: 100vw;\r\n  display: flex;\r\n  flex-flow: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n`\r\n\r\nconst LoaderSpinner = ({ resultsLoading }) => {\r\n  console.log(resultsLoading);\r\n  if (resultsLoading) {\r\n    return (\r\n      <LoaderContainer data-testid=\"Loader\">\r\n        <Loader\r\n          type=\"RevolvingDot\"\r\n          color=\"red\"\r\n          height={100}\r\n          width={100}\r\n        />\r\n      </LoaderContainer>\r\n    );\r\n  };\r\n  return (null);\r\n}\r\n\r\nexport default LoaderSpinner;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled from 'styled-components';\r\n\r\n\r\nconst SearchResultsContainer = styled.div`\r\n  width: calc(100vw - 40px);\r\n  margin: 20px;\r\n  display: flex; \r\n  flex-flow: row wrap;\r\n  justify-content: center;\r\n  align-items: start;\r\n`;\r\n\r\nconst ResultsFrame = styled.div`\r\ndisplay: flex; \r\nflex-flow: row wrap;\r\njustify-content: center;\r\nalign-items: start;\r\n`;\r\n\r\nconst ScaledImage = styled.img`\r\n  width: 270px;\r\n  height: 300px;\r\n  margin: 10px;\r\n  border: none;\r\n  border-radius: 10px;\r\n  overflow: hidden;\r\n  object-fit: cover;\r\n`\r\n\r\nconst renderImages = (searchResults) => {\r\n    return (\r\n      <ResultsFrame data-testid=\"images-rendered\">\r\n        {searchResults.images.map((result) => (\r\n          <ScaledImage\r\n            key={result.id}\r\n            src={result.image}\r\n            alt={result.description}\r\n          />\r\n        ))}\r\n       </ResultsFrame> \r\n    )\r\n};\r\n\r\n\r\nconst SearchResults = ({ searchResults }) => {\r\n\r\n   return (\r\n      <SearchResultsContainer>\r\n        {renderImages(searchResults)}\r\n      </SearchResultsContainer>\r\n  );\r\n};\r\n\r\nSearchResults.propTypes = {\r\n  searchResults: PropTypes.object\r\n}\r\n\r\nexport default SearchResults;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled from 'styled-components';\r\n\r\nconst ErrorStyles = styled.h2`\r\nmargin: 20px 20px;\r\ncolor: #D6D4D0;\r\n`\r\n\r\nconst NoImagesMessage = () => {\r\n  return (\r\n    <ErrorStyles>\r\n      No images found. Please try a different search term.\r\n    </ErrorStyles>\r\n  )\r\n};\r\n\r\nexport default NoImagesMessage;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled from 'styled-components';\r\n\r\nconst ErrorStyles = styled.h2`\r\nmargin: 20px 20px;\r\ncolor: #D6D4D0;\r\n`\r\n\r\nconst ErrorMessage = ({ errorParams }) => {\r\n  return (\r\n    <div data-testid=\"error-message\">\r\n      <ErrorStyles>\r\n        {`${errorParams.errorStatus} Error: ${errorParams.errorText}`}\r\n      </ErrorStyles>\r\n    </div>\r\n  )\r\n};\r\n\r\nErrorMessage.propTypes = {\r\n  errorParams: PropTypes.object\r\n};\r\n\r\nexport default ErrorMessage;","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst BlankStyles = styled.h2`\r\nmargin: 20px 20px;\r\ncolor: #D6D4D0;\r\n`\r\n\r\nconst BlankMessage = () => {\r\n  return (\r\n      <BlankStyles>\r\n        Please enter a search term.\r\n      </BlankStyles>\r\n  )\r\n};\r\n\r\nexport default BlankMessage;","import React, { useState } from 'react';\r\nimport SearchResults from './SearchResults';\r\nimport NoImagesMessage from './NoImagesMessage'\r\nimport ErrorMessage from './ErrorMessage';\r\nimport BlankMessage from './BlankMessage';\r\n\r\nconst ResultsRenderer = ({ searchResults, resultsLoading }) => {\r\n      if (searchResults.notSearched) {\r\n        return (null)\r\n      } else if (resultsLoading) {\r\n        return (null)\r\n\r\n      } else if (searchResults.noSearchTerm) {\r\n        return (\r\n          <BlankMessage />\r\n        )\r\n      } else if (searchResults.errorStatus) {\r\n        return (\r\n          <ErrorMessage errorParams = {searchResults} />\r\n        )\r\n      } else if (searchResults.images.length > 0) {\r\n        return (\r\n          <SearchResults searchResults = {searchResults} />\r\n        )\r\n      } else if (searchResults.images.length === 0 ) {\r\n        return ( \r\n          <NoImagesMessage />\r\n        )\r\n      }\r\n}\r\n\r\n  export default ResultsRenderer;\r\n\r\n\r\n","import React, { useState } from 'react';\r\nimport { GlobalStyles } from '../styles/global';\r\nimport Header from './Header';\r\nimport LoaderSpinner from './LoaderSpinner';\r\nimport ResultsRenderer from './ResultsRenderer'\r\n\r\n\r\n\r\nfunction App() {\r\n\r\n  const [searchResults, setSearchResults] = useState({notSearched: true});\r\n  const [resultsLoading, setResultsLoading] = useState(false);\r\n\r\n  console.log(searchResults);\r\n\r\n  return (\r\n    <>\r\n      <GlobalStyles />\r\n\r\n      <Header\r\n        setSearchResults = {setSearchResults}\r\n        setResultsLoading = {setResultsLoading}\r\n       />\r\n\r\n        <LoaderSpinner\r\n          resultsLoading = {resultsLoading} \r\n        />\r\n\r\n        <ResultsRenderer\r\n          resultsLoading = {resultsLoading}\r\n          searchResults={searchResults}\r\n        />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}